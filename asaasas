local Players = game:GetService("Players")
local plr = Players.LocalPlayer
local char = plr.Character
local TweenService = game:GetService("TweenService")

-- Player variables: Player mouse, Character, speed
local Mouse = plr:GetMouse()
local Character = plr.Character


local TweenStyle = TweenInfo.new(0.30,Enum.EasingStyle.Exponential)


--
local CoreUi = game:GetService("CoreGui")

if CoreUi:FindFirstChild("Quake Hub") then
  CoreUi["Quake Hub"]:Destroy()
end

local nightModeColors = {
 BackGroundColor = Color3.fromRGB(15 ,15,15),
 MainFrameColor = Color3.fromRGB(27,27,27),
 ButtonsColor = Color3.fromRGB(47,47,47),
 ToggleColor = Color3.fromRGB(57,57,57)
}
local LightModeColors = {
 BackGroundColor = Color3.fromRGB(225 ,225,225),
 MainFrameColor = Color3.fromRGB(220,220,220),
 ButtonsColor = Color3.fromRGB(230,230,230),
 ToggleColor = Color3.fromRGB(247,247,247)
}

local Sizes = {
  Buttons = UDim2.new(1,0,0.12,0),
  Sliders = UDim2.new(1,0,0.13,0),
  Toggles = UDim2.new(1,0,0.125,0),
  DropDowns = UDim2.new(1,0,0.15,0)
}



local Window = {}
local Buttons = {}
local Tabs = {}
local Toggle = {}
local Sliders = {}
local Labels = {}
local Notify = {}
local DropDown = {}
local self = {}
local NightMode = true

Window.__index = Window
Buttons.__index = Buttons
Tabs.__index = Tabs
Sliders.__index = Sliders
Labels.__index = Labels
Toggle.__index = Toggle
Notify.__index = Notify
DropDown.__index = DropDown
self.__index = self

function ChangeMode()
    local modeColors = NightMode and nightModeColors or LightModeColors

    for _, v in pairs(Tabs) do
        if v.Name == "Main" then
            v.Parent.BackgroundColor3 = modeColors.BackGroundColor
            v.BackgroundColor3 = modeColors.MainFrameColor
            v.Parent.TabHandler.BackgroundColor3 = modeColors.MainFrameColor

            for _, child in pairs(v.Parent.TabHandler:GetChildren()) do
                if child.Name == "b" then
                    child.BackgroundColor3 = modeColors.ButtonsColor
                
                end
            end

            for _, element in pairs(v:GetDescendants()) do
                if element:IsA("TextButton") or element:IsA("TextLabel") then
                    element.BackgroundColor3 = modeColors.ButtonsColor
                    local dropDownFrame = element:FindFirstChild("Drop Down Frame")
                    if dropDownFrame then
                        dropDownFrame.BackgroundColor3 = modeColors.MainFrameColor
                    end
                end
            end
        end
    end
end



function TweenColor(Color,Object,Style)
  local Tween = TweenService:Create(Object, Style or TweenStyle, {
    BackgroundColor3 = Color
})
Tween:Play()
end

function Window.new(data)
local self = setmetatable({},Window)

self.Sg = Instance.new("ScreenGui")
self.Frame = Instance.new("Frame")
self.Shadow = Instance.new("ImageLabel")
self.Corner = Instance.new("UICorner")
self.Corner2 = Instance.new("UICorner")
self.Corner3 = Instance.new("UICorner")
self.Corner4 = Instance.new("UICorner")
self.title = Instance.new("TextLabel")
self.TabHandler = Instance.new("Frame")
self.List = Instance.new("UIListLayout")
self.List2 = Instance.new("UIListLayout")
self.Border = Instance.new("UIStroke")
self.Border2 = Instance.new("UIStroke")
self.Apear = Instance.new("ImageButton")
self.Close = Instance.new("TextButton")
self.SelectedTab = Instance.new("Frame")

self.Sg.Parent = CoreUi
self.Frame.Parent = self.Sg
self.Corner.Parent = self.Frame
self.Corner2.Parent = self.TabHandler
self.Corner3.Parent = self.Close
self.title.Parent = self.Frame
self.TabHandler.Parent = self.Frame
self.Shadow.Parent = self.Frame
self.Apear.Parent = self.Frame
self.Close.Parent = self.Sg
self.SelectedTab.Parent = self.Frame

self.Sg.Name = "Quake Hub"

self.Frame.Size = UDim2.new(0.55, 0, 0.60, 0)
self.Frame.Position = UDim2.new(0, 0.5, 0, 0.5)
self.Frame.Active = true
self.Frame.Draggable = true
self.Frame.Name = "Main Frame"

self.title.BackgroundTransparency = 1
self.title.Text = data.Name
self.title.Font = Enum.Font.DenkOne
self.title.TextSize = 14
self.title.TextColor3 = Color3.new(35,35,35)
self.title.Position = UDim2.new(0.1,0,0.94,0)
self.title.ZIndex = 99

self.Corner.CornerRadius = UDim.new(0, 6)
self.Corner2.CornerRadius = UDim.new(0, 6)
self.Corner2.CornerRadius = UDim.new(0,6)

self.TabHandler.Size = UDim2.new(0.20, 0, 1, 0)
self.TabHandler.Name = "TabHandler"

self.List.Parent = self.TabHandler
self.List.Padding = UDim.new(0.025,0)

self.List2.Parent = self.TabFrame
self.List2.Padding = UDim.new(0.01,0)

self.Border.Parent = self.Frame
self.Border.Thickness = 2.5

self.Border2.Parent = self.TabHandler
self.Border2.Thickness = 2.5

self.Shadow.Size = UDim2.new(2,0,2,0)
self.Shadow.ZIndex = -1
self.Shadow.Image = "rbxassetid://18810622958"
self.Shadow.ImageTransparency = 0
self.Shadow.BackgroundTransparency = 1
self.Shadow.Position = UDim2.new(-0.5,0,-0.5,0)

self.Apear.Size = UDim2.new(0.06,0,0.1,0)
self.Apear.Position = UDim2.new(0,0,0.8,0)
self.Apear.Image = "rbxassetid://18812208598"
self.Apear.BackgroundTransparency = 1
self.Apear.ZIndex = 999

self.Close.Size = UDim2.new(0.07,0,0.07,0)
self.Close.Position = UDim2.new(0.478,0,0.05,0)
self.Close.BackgroundColor3 = Color3.fromRGB(239, 68, 35)
self.Close.TextSize = 14
self.Close.Font = Enum.Font.DenkOne
self.Close.ZIndex = math.huge
self.Close.Text = "X"

self.Apear.MouseButton1Click:Connect(function()
  NightMode = not NightMode
  ChangeMode()
  if NightMode == false then
    self.Apear.Image = "rbxassetid://18829428142"
    else
      self.Apear.Image = "rbxassetid://18812208598"
    end
end)

self.Close.MouseButton1Click:Connect(function() 
  self.Close.Parent["Main Frame"].Visible = not self.Close.Parent["Main Frame"].Visible
  if self.Close.Parent["Main Frame"].Visible then
    self.Close.Text = "X"
    else
      self.Close.Text = "+"
    end
end)
self.SelectedTab.Size = UDim2.new(0.01,0,0.07,0)
self.SelectedTab.BackgroundColor3 = Color3.fromRGB(0,170,255)
self.SelectedTab.Position = UDim2.new(0.01,0,0.01,0)

self.Corner4.Parent = self.SelectedTab
self.Corner4.CornerRadius = UDim.new(0,6)




function self:NewTab(data)
local self = setmetatable({},self)

self.List2 = Instance.new("UIListLayout")
self.TabBtn = Instance.new("TextButton")
self.Corner = Instance.new("UICorner")
self.Corner2 = Instance.new("UICorner")
self.TabFrame = Instance.new("ScrollingFrame")

self.Corner.Parent = self.TabBtn
self.Corner2.Parent = self.TabFrame

self.Corner.CornerRadius = UDim.new(0, 6)
self.Corner2.CornerRadius = UDim.new(0, 6)

self.TabBtn.Size = UDim2.new(1, 0, 0.1, 0)
self.TabBtn.BackgroundTransparency = 0
self.TabBtn.Text = data.Name
self.TabBtn.Font = Enum.Font.DenkOne
self.TabBtn.Parent = self.TabHandler
self.TabBtn.TextColor3 = Color3.fromRGB(0,0,0)
self.TabBtn.TextSize = 14
self.TabBtn.Name = "b"


self.TabFrame.Parent = self.Frame
self.TabFrame.Size = UDim2.new(0.79,0,0.979,0)
self.TabFrame.Position = UDim2.new(0.21,0,0.01,0)
self.TabFrame.Visible = false
self.TabFrame.Name = "Main"
self.TabFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
self.TabFrame.ScrollBarThickness = 0.1
self.TabFrame.BackgroundTransparency = 1
self.TabFrame.CanvasSize = UDim2.new(0,0,0,0)

self.List2.Parent = self.TabFrame
self.List2.Padding = UDim.new(0.01,0)

local t = self.TabBtn.BackgroundColor3
Tabs[data.Name] = self.TabFrame
local yPos = self.TabBtn.AbsolutePosition.Y
self.TabBtn.MouseButton1Click:Connect(function()
  
  local Tween = TweenService:Create(self.SelectedTab, TweenInfo.new(0.5,Enum.EasingStyle.Exponential), {
    Position = UDim2.new(0.01,0,0,yPos + 3)
})

Tween:Play()
for k,v in pairs(Tabs) do
  if k ~= data.Name then
    v.Visible = false
    for _,Child in next,v.Parent.TabHandler:GetChildren() do
      if Child:IsA("TextButton") and Child.Name == "b" then
      if NightMode then
      Child.BackgroundColor3 = nightModeColors.ButtonsColor
      else
        Child.BackgroundColor3 = LightModeColors.ButtonsColor
      end
      end
      end
    elseif k == data.Name then
      v.Visible = true
      if NightMode then
      local oldColorNight = nightModeColors.ButtonsColor
      local newR = math.clamp(oldColorNight.R + 20, 0, 255)
      local newG = math.clamp(oldColorNight.G + 20, 0, 255)
      local newB = math.clamp(oldColorNight.B + 20, 0, 255)
      TweenColor(Color3.new(newR / 255, newG / 255, newB / 255),self.TabBtn,TweenInfo.new(0.2,Enum.EasingStyle.Linear))
      else
      local oldColorLight = LightModeColors.ButtonsColor
      local newRLight = math.clamp(oldColorLight.R +15, 0, 255)
      local newGLight= math.clamp(oldColorLight.G +15, 0, 255)
      local newBLight = math.clamp(oldColorLight.B + 15, 0, 255)
      TweenColor(Color3.new(newRLight, newGLight, newBLight),self.TabBtn,TweenInfo.new(0.2,Enum.EasingStyle.Linear))
      
      end
  end
end
end)
function self:NewButton(data)
local self = setmetatable({},Buttons)

self.button = Instance.new("TextButton")
self.Corner = Instance.new("UICorner")

self.button.Parent = self.TabFrame
self.button.Text = data.Name
self.button.Font = Enum.Font.DenkOne
self.button.Size = Sizes.Buttons
self.button.Position = UDim2.new(0.5,0,0.5,0)
self.button.TextColor3 = Color3.new(0,0,0)
self.button.TextSize = 14
self.button.Name = "a"
self.button.ZIndex = 999

self.Corner.Parent = self.button
self.button.Corner.CornerRadius = UDim.new(0,6)

self.button.BackgroundColor3 = Color3.fromRGB(47,47,47)

self.button.MouseButton1Click:Connect(function() 
data.Callback()
   end)
   
   
   return self
end
function self:NewToggle(data)
local self = setmetatable({},Toggle)

self.button = Instance.new("TextButton")
self.Corner = Instance.new("UICorner")
self.Corner2 = Instance.new("UICorner")
self.Corner3 = Instance.new("UICorner")
self.Toggle = Instance.new("Frame")

self.button.Parent = self.TabFrame
self.button.Text = data.Name
self.button.Font = Enum.Font.DenkOne
self.button.Size = Sizes.Toggles
self.button.Position = UDim2.new(0.5,0,0.5,0)
self.button.TextColor3 = Color3.fromRGB(0,0,0)
self.button.TextSize = 14
self.button.Name = "a"

self.Toggle.Parent = self.button
self.Toggle.Size = UDim2.new(0.05,0,0.7,0)
self.Toggle.Position = UDim2.new(0.93,0,0.179,0)

self.Corner.Parent = self.button
self.Corner.CornerRadius = UDim.new(0,6)


 
self.Corner3.Parent = self.Toggle
self.Corner3.CornerRadius = UDim.new(9,9)

self.button.MouseButton1Click:Connect(function()
  data.Value = not data.Value
  if data.Value == false then
    self.Toggle.BackgroundColor3 = Color3.fromRGB(64,64,64)
    else
      self.Toggle.BackgroundColor3 = Color3.fromRGB(75, 151, 75)
  end
  
    data.Callback(data.Value)
    
end)
   return self
end
function self:NewSlider(data)
    local self = setmetatable({},Sliders)
    self.Slider = Instance.new("Frame")
    self.Fill = Instance.new("Frame")
    self.Trigger = Instance.new("TextButton")
    self.Display = Instance.new("TextLabel")
    self.outputValue = 0.5
    self.Corner = Instance.new("UICorner")
    self.Corner2 = Instance.new("UICorner")
    self.sliderActive = false
    
    self.Slider.Parent = self.TabFrame
    self.Slider.Size = Sizes.Sliders
    self.Slider.Name = "a"
    self.Slider.BackgroundTransparency = 1
    
    self.Corner.Parent = self.Slider
    self.Corner.CornerRadius = UDim.new(0, 6)
    
    self.Corner2.Parent = self.Fill
    self.Corner2.CornerRadius = UDim.new(0, 6)
    
    self.Fill.Parent = self.Slider
    self.Fill.Size = UDim2.new(self.outputValue/2, 0, 1, 0)
    self.Fill.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
    
    self.Trigger.Parent = self.Slider
    self.Trigger.BackgroundTransparency = 1
    self.Trigger.Text = ""
    self.Trigger.Size = UDim2.new(1, 0, 1, 0)
    self.Trigger.MouseButton1Down:Connect(function()
        self:ActivateSlider() -- Use instance-specific method
    end)
    
    self.Display.AnchorPoint = Vector2.new(0, 0.5)
    self.Display.BackgroundTransparency = 1
    self.Display.Position = UDim2.new(0, 0, 0.5, 0)
    self.Display.Size = UDim2.new(1, 0, 0.5, 0)
    self.Display.Parent = self.Slider
    self.Display.Text = data.Name.." "..tostring(data.Start)
    self.Display.TextSize = 14
    self.Display.Font = Enum.Font.DenkOne
    self.Display.TextColor3 = Color3.fromRGB(0,0,0)
    
    game:GetService("UserInputService").InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            self.sliderActive = false
        end
    end)
    
    function self:UpdateSlider()
        self.output = math.clamp((Mouse.X - self.Slider.AbsolutePosition.X) / self.Slider.AbsoluteSize.X, 0, 1)
        data.Callback(math.round(self.output * data.Max))
        if self.outputValue ~= self.output then
          
            TweenService:Create(self.Fill, TweenInfo.new(0.2), { Size = UDim2.new(self.output, 0, 1, 0) }):Play()
        end
        self.outputValue = self.output
        self.Display.Text = data.Name.." "..tostring(math.round(self.output * data.Max))
    end

    function self:ActivateSlider()
        self.sliderActive = true
        while self.sliderActive do
            wait()
            self:UpdateSlider()
        end
    end
    
    return self
end

function self:NewSection(data)
  
local self = setmetatable({},Labels)
self.label = Instance.new("TextLabel")
self.Corner = Instance.new("UICorner")

self.label.Parent = self.TabFrame
self.label.Text = data.Name
self.label.Font = Enum.Font.DenkOne
self.label.Size = UDim2.new(1, 0, 0.12, 0)
self.label.Position = UDim2.new(0.5,0,0.5,0)
self.label.TextSize = 14
self.label.Name = "a"
self.label.BackgroundTransparency = 1
self.Corner.Parent = self.label
self.Corner.CornerRadius = UDim.new(0,6)
return self
   
end
function self:NewDropDown(data)
  local self = setmetatable({},DropDown)
  
  self.DropDownBtn = Instance.new("TextButton")
  self.DropDownFrame = Instance.new("ScrollingFrame")
  self.DropDownText = Instance.new("TextLabel")
  self.List = Instance.new("UIListLayout")
  self.Corner = Instance.new("UICorner")
  self.Corner2 = Instance.new("UICorner")
  
  self.DropDownBtn.Parent = self.TabFrame
  self.DropDownFrame.Parent = self.DropDownBtn
  self.DropDownText.Parent = self.DropDownBtn
  
  self.DropDownBtn.Size = Sizes.DropDowns
  self.DropDownBtn.Font = Enum.Font.DenkOne
  self.DropDownBtn.Font = Enum.Font.DenkOne
  self.DropDownBtn.TextSize = 14
  self.DropDownBtn.TextColor3 = Color3.fromRGB(0,0,0)
  
  self.DropDownFrame.Size = UDim2.new(0.3,0,0,0)
  self.DropDownFrame.Position = UDim2.new(0.7,0,1,0)
  self.DropDownFrame.ZIndex = 9999
  self.DropDownFrame.Visible = false
  self.DropDownFrame.Name = "Drop Down Frame"
  
  self.DropDownText.Size = UDim2.new(0.3,0,1,0)
  self.DropDownText.BackgroundTransparency = 1
  self.DropDownText.Text = data.Name
  self.DropDownText.Font = Enum.Font.DenkOne
  self.DropDownText.TextSize = 14
  self.DropDownText.TextColor3 = Color3.fromRGB(0,0,0)
  
  self.Corner.Parent = self.DropDownBtn
  self.Corner.CornerRadius = UDim.new(0,6)
  
  self.Corner2.Parent = self.DropDownFrame
  self.Corner2.CornerRadius = UDim.new(0,6)
  
  self.List.Parent = self.DropDownFrame
  
  local close = TweenService:Create(self.DropDownFrame,TweenInfo.new(0.3,Enum.EasingStyle.Quad),{Size = UDim2.new(0.3,0,0,0)})
  local open = TweenService:Create(self.DropDownFrame,TweenInfo.new(0.3,Enum.EasingStyle.Quad),{Size = UDim2.new(0.3,0,0,200)})
  local Opened = false
  self.DropDownBtn.MouseButton1Click:Connect(function()
      if Opened then
          close:Play()
          Opened = false
          wait(0.3)
          self.DropDownFrame.Visible = false
      else
        self.DropDownFrame.Visible = true
          open:Play()
          Opened = true
          
      end
  end)
  function self:NewObject(data2)
  local self = setmetatable({},DropDownObject)
  
  self.button = Instance.new("TextButton")
  self.corner = Instance.new("UICorner")
  
  self.button.Parent = self.DropDownFrame
  self.button.Size = UDim2.new(1,0,0.1,0)
  self.button.BackgroundColor3 = Color3.fromRGB(0,0,0)
  self.button.ZIndex = 99999
  self.button.Text = data2.Name
  self.button.Font = Enum.Font.DenkOne
  self.button.TextSize = 14
  self.button.TextColor3 = Color3.fromRGB(0,0,0)
  
  self.corner.Parent = self.button
  self.corner.CornerRadius = UDim.new(0,6)
  
  self.button.MouseButton1Click:Connect(function()
      close:Play()
      self.DropDownText.Text = self.button.Text
      Opened = false
      data.Callback(self.DropDownText.Text)
      wait(0.3)
      self.DropDownFrame.Visible = false
    end)
  
  return self
end
  return self
end

return self

end
return self
-- end of the function
end

return Window