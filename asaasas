-- game id: 66654135
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/x-wz5/reg/refs/heads/main/asaasas"))()
local Window = Library.new({Name = "Tiger hub: mm2"})
Window:Notify({
	Title = "Welcome to Tiger Hub: MM2!",
	Info = "key system status: Off",
	Duration = 5,
	ColorText = {
   		Text = nil,
   		TitleColor = nil,
    	Text2 = "Off",
    	InfoColor = Color3.fromRGB(255,0,0)
    }
})

Window:Notify({
	Title = "Join our Discord!",
	Info = "First 5 get permenat KEY!!\nJoin our discord: .gg/RhYjPCPj",
	Duration = 5,
	ColorText = {
   		Text = nil,
   		TitleColor = nil,
    	Text2 = "Off",
    	InfoColor = Color3.fromRGB(255,0,0),
    	RGB = true,
    	RGBtext = "KEY",
    	RGBDuration = 5
    }
})

local plrs = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local VirtualUser = game:GetService("VirtualUser")
--^^^^^^ Services

local plrs = game:GetService("Players")
local plr = plrs.LocalPlayer
local Char = plr.Character or plr.CharacterAdded:Wait()
local hrp = Char:WaitForChild("HumanoidRootPart")
local hum = Char:WaitForChild("Humanoid")
local oldPos = UDim2.new(1, -95, 0.400000006, -95)
local AutoFarmTypeString = "All" -- default
local Coins = plr.PlayerGui.MainGUI.Lobby.Dock.CoinBags.Container.Candy.CurrencyFrame.Icon.Coins
local Currency = 0
local oldGravity = workspace.Gravity
local Dealay = 1
local AutoFarmSpeed = 25
local NoClip = true

plr.CharacterAdded:Connect(function(newChar)
  Char = newChar
  hrp = newChar:WaitForChild("HumanoidRootPart")
  hum = newChar:WaitForChild("Humanoid")
  NoClip = true
end)

Coins.Changed:Connect(function(property)
  
  if property == "Text" then
    Currency = Coins.Text
  end
end)

local env = getgenv()
local esp = false
local espGun = false
local Tweening = false
local KillAllValue = false
env.JumpPosition = false
env.maxDistance = 50
local AutoShoot = false
local AutoFarmValue = false
env.AntiAfk = false

local Funcs = {} -- Game Functions
local roles = {
    ["Murder"] = {
        Color = Color3.fromRGB(255, 0, 0)
    },
    ["Sheriff"] = {
        Color = Color3.fromRGB(0, 0, 255)
    },
    ["Inc"] = {
        Color = Color3.fromRGB(0, 255, 0)
    }
}


local function isInGame(player, model)
    -- Ensure the player and model exist
    if not player.Character or not model then return false end

    local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return false end

    -- Get the model's size and position
    local modelSize = model:GetExtentsSize()
    local modelCFrame = model:GetBoundingBox() -- Provides position and orientation

    -- Calculate the model's bounding box corners
    local modelMin = modelCFrame.Position - modelSize / 2
    local modelMax = modelCFrame.Position + modelSize / 2

    -- Get the player's position
    local playerPosition = humanoidRootPart.Position

    -- Check if player's position is within the model's bounding box
    return (playerPosition.X >= modelMin.X and playerPosition.X <= modelMax.X)
        and (playerPosition.Y >= modelMin.Y and playerPosition.Y <= modelMax.Y)
        and (playerPosition.Z >= modelMin.Z and playerPosition.Z <= modelMax.Z)
end



function isAlive(plr)
  if plr and plr.Character and plr.Character.Humanoid and plr.Character.Humanoid.Health > 0 then
    return true
  end
  return false
end

Funcs.Tween = function(player, thing,f)
    assert(typeof(player) == "Instance" and player:IsA("Player"), "Error: Expected Player Instance. (#1)")
    assert(typeof(thing) == "Instance" or typeof(thing) == "Vector3" or typeof(thing) == "CFrame", "Error: Expected one of the following: (CFrame,Instance,Vector3) Type. (#2)")
    
    if not Char or not hrp then
      task.wait(3)
      if not Char or not hrp then
        error("HumanoidRootPart or Character have not found.",2)
        return
      end
    end
    
    local speed = f or 25
    local Pos = typeof(thing) == "Instance" and thing.Position or typeof(thing) == "CFrame" and thing.Position or typeof(thing) == "Vecotr3" and thing or thing
    local dis = (hrp.Position - Pos).Magnitude or nil
    local t = dis and dis / speed or 5
    
    local Info = TweenInfo.new(t, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
    local TweenPlay = game:GetService("TweenService"):Create(hrp, Info, {CFrame = CFrame.new(thing)})
    
    return TweenPlay
end

Funcs.CheckRole = function(player)
    local sheriff = player:FindFirstChild("Backpack") and player.Backpack:FindFirstChild("Gun") or player.Character:FindFirstChild("Gun") ~= nil
    local murder =  player:FindFirstChild("Backpack") and player.Backpack:FindFirstChild("Knife") or player.Character:FindFirstChild("Knife") ~= nil
    
    if murder then
        return "Murder"
    end
    
    if sheriff then
        return "Sheriff"
    end
    
    return "Inc"
end

Funcs.CheckRoles = function()
    local result = {
      Murder,
      Sheriff,
      Inc = {}
    }

    for k, player in pairs(plrs:GetPlayers()) do
        if player and player:FindFirstChild("Backpack") and player.Character then
            local sheriff = (player.Backpack:FindFirstChild("Gun")) or (player.Character:FindFirstChild("Gun")) ~= nil
            local murder = (player.Backpack:FindFirstChild("Knife")) or (player.Character:FindFirstChild("Knife")) ~= nil
            
            if murder then
                result.Murder = player
            elseif sheriff then
                result.Sheriff = player
            else
                result.Inc[player] = "Inc"
            end
        end
    end

    return result
end

Funcs.WatchAttributeChange = function(instance)
  assert(typeof(instance) == "Instance", "Error: Expected an Instance parameter, (got: "..type(instance)..")")

  instance.AttributeChanged:Connect(function(attributeName)
    print("Attribute changed:", attributeName, "New Value:", instance:GetAttribute(attributeName))
  end)
end


-- Main functions

local Tweening = false
Funcs.AutoFarm = function(s)
  
  if not s then
    hum.PlatformStand = false
    workspace.Gravity = 196.2
    Funcs.NoClip()
    Funcs.Tween(plr,hrp.Position + Vector3.new(0,6,0))
    return
  end
  
  
  hum.PlatformStand = true
  workspace.Gravity = 0
	if NoClip == false then
		Funcs.NoClip()
	end
  -- Locate CoinsPath once for efficiency
  local CoinsPath
  local MinDistance = 500
  CoinsPath = CoinsPath or workspace:FindFirstChild("CoinContainer", true)
  
  if not CoinsPath or CoinsPath ~= workspace:FindFirstChild("CoinContainer",true) then
    workspace.Gravity = oldGravity
    repeat
      CoinsPath = CoinsPath or workspace:FindFirstChild("CoinContainer", true)
      task.wait()
    until CoinsPath ~= nil
  end
  
  local ClosesetCoin = nil

  if Currency == 40 then
    MinDistance = 500
    hum.Health = 0
    Currency = 0
    return
  end
  
  for _, coin in pairs(CoinsPath:GetChildren()) do
      if coin:IsA("BasePart") then
          local Type = coin:GetAttribute("CoinID")
          local isCollected = coin:GetAttribute("Collected") or false
          local Distance = (hrp.Position - coin.Position).Magnitude
  
          
          if (env.maxDistance > Distance) and not isCollected and (Type == AutoFarmTypeString or AutoFarmTypeString == "All") then
              if Distance < MinDistance then
                  
                  ClosesetCoin = coin
                  if Distance < 50 then
                  	MinDistance = 25
                  else
                  	MinDistance = Distance
                  end
              end
          end
      end
  end
  
  if ClosesetCoin and Tweening == false then
    ClosesetCoin.Size = Vector3.new(5,7,5)
    local isCollected = ClosesetCoin:GetAttribute("Collected") or false
    if isCollected then return end
    local UnderCoin = ClosesetCoin.Position - Vector3.new(0,5,0)
    
    Tweening = Funcs.Tween(plr, UnderCoin,AutoFarmSpeed)
    Tweening:Play()
	
    Tweening.Completed:Wait()
    task.wait(Dealay)
    Tweening = false
  end
  
end



Funcs.NoClip = function()
  NoClip = not NoClip
  for _, descendant in pairs(Char:GetDescendants()) do
    if descendant:IsA("BasePart") then
      descendant.CanCollide = NoClip
    end
  end
end


-- Murder functions

Funcs.KillAll = function(s)
  if not s then
    return
  end
  local isMurder = Funcs.CheckRole(plr)
  if not isMurder == "Murder" then return end
  local EquipingKnife = Char:FindFirstChild("Knife") ~= nil
  if not EquipingKnife then
    local Knife = plr.Backpack:FindFirstChild("Knife") or nil
    if not Knife then return end 
    Knife.Parent = Char
  end
  
  for _,player in pairs(plrs:GetPlayers()) do
    if player ~= game.Players.LocalPlayer and player.Character
    and isAlive(player)
    then
      local CoinsPath = workspace:FindFirstChild("CoinContainer",true) or nil
      if not CoinsPath then return end
      local Map = CoinsPath.Parent:FindFirstChild("Map",true)
      if isInGame(player,Map) then
      	
      	
        workspace.Gravity = 0
        local PlayerCharacter = player.Character
        local PlayerHrp = PlayerCharacter:FindFirstChild("HumanoidRootPart")
        hrp.CFrame = PlayerHrp.CFrame * CFrame.new(0, 0, 1)
        task.wait(0.2)
        VirtualUser:Button1Down(Vector2.new(0, 0))
        VirtualUser:Button1Up(Vector2.new(0, 0))
        
      end
    end
  end
  workspace.Gravity = 196.2
end

Funcs.ToSheriff = function()
    local Sheriff = Funcs.CheckRoles()["Sheriff"] or nil
    if Sheriff and isAlive(Sheriff) then
        
        local SheriffHRP = Sheriff.Character:FindFirstChild("HumanoidRootPart")
        if SheriffHRP then
            local LookVector = SheriffHRP.CFrame.LookVector
            hrp.CFrame = SheriffHRP.CFrame - (LookVector * 10) -- 10 studs behind
        end
    end
end

-- Visual functions

Funcs.ESP = function(s)
    local rolesT = Funcs.CheckRoles()

    if not s then
        -- Turn off ESP by destroying highlights
        if rolesT.Murder and rolesT.Murder.Character and rolesT.Murder.Character:FindFirstChild("esp") then
            rolesT.Murder.Character.esp:Destroy()
        end
        if rolesT.Sheriff and rolesT.Sheriff.Character and rolesT.Sheriff.Character:FindFirstChild("esp") then
            rolesT.Sheriff.Character.esp:Destroy()
        end
        table.foreach(rolesT.Inc, function(key, value)
            if key and key.Character and key.Character:FindFirstChild("esp") then
                key.Character.esp:Destroy()
            end
        end)
        return
    end

    -- Turn on ESP by creating highlights
    local murder = rolesT.Murder
    local sheriff = rolesT.Sheriff
    local Incs = rolesT.Inc

    if murder and murder.Character and not murder.Character:FindFirstChild("esp") then
        local MurderEsp = Instance.new("Highlight")
        MurderEsp.Parent = murder.Character
        MurderEsp.FillColor = Color3.fromRGB(255, 0, 0)
        MurderEsp.Name = "esp"
    end

    if sheriff and sheriff.Character and not sheriff.Character:FindFirstChild("esp") then
        local SheriffEsp = Instance.new("Highlight")
        SheriffEsp.Parent = sheriff.Character
        SheriffEsp.FillColor = Color3.fromRGB(0, 0, 255)
        SheriffEsp.Name = "esp"
    end

    table.foreach(Incs, function(p, value)
        if p and p.Character and not p.Character:FindFirstChild("esp") then
            local IncEsp = Instance.new("Highlight")
            IncEsp.Parent = p.Character
            IncEsp.FillColor = Color3.fromRGB(0, 255, 0)
            IncEsp.Name = "esp"
        end
    end)
    
    -- Update roles if they already have ESP 
    if murder and murder.Character and murder.Character:FindFirstChild("esp") then
        local MurderEsp = murder.Character:FindFirstChild("esp")
        MurderEsp.FillColor = Color3.fromRGB(255, 0, 0)
    end

    if sheriff and sheriff.Character and sheriff.Character:FindFirstChild("esp") then
        local SheriffEsp = sheriff.Character:FindFirstChild("esp")
        SheriffEsp.FillColor = Color3.fromRGB(0, 0, 255)
    end

    table.foreach(Incs, function(p, value)
        if p and p.Character and p.Character:FindFirstChild("esp") then
            local IncEsp = p.Character:FindFirstChild("esp")
            IncEsp.FillColor = Color3.fromRGB(0, 255, 0)
        end
    end)
    
end

Funcs.Xray = function(t)
    if t then
        -- Functionality for Xray (not implemented)
    end
end

Funcs.ESPGun = function(s)
    if not s then
        for _,instance in pairs(workspace:GetDescendants()) do
            if (instance.Name == "GunDrop") and instance:FindFirstChild("ESP") then
                instance.ESP:Destroy()
                return
            end
        end
        return
    end
    
    local gun
	  for _,instance in pairs(workspace:GetDescendants()) do
	        if instance.Name == "GunDrop" then
	            gun = instance
	            break
	        end
	  end
  if not gun then return end
  local esp = Instance.new("Highlight")
  esp.Name = "ESP"
  esp.FillColor = Color3.fromRGB(0,255,0)
  esp.Parent = gun
  esp.Adornee = gun
end




--Sheriff functions

Funcs.AutoShoot = function(s)
    if not s then
        return
    end

    local role = Funcs.CheckRole(plr)

    if role == "Sheriff" then
        local Remote
        
        -- Wait until the gun is found
        repeat
            task.wait()
            if not Funcs.CheckRole(plr) == "Sheriff" then return end
            local s,r = pcall(function()
            	return Char.Gun.KnifeLocal.CreateBeam.RemoteFunction
            end)
            Remote = r
        until Remote ~= nil

        local Roles = Funcs.CheckRoles()
        local Murder = Roles.Murder

        if Murder == nil then return end

        -- Check for obstacles or a clear path
        local MurderPosition = Murder.Character.HumanoidRootPart.Position
        local SheriffPosition = Char.HumanoidRootPart.Position
        local RayParams = RaycastParams.new()
        RayParams.FilterDescendantsInstances = {Char} -- Ignore own character only
        RayParams.FilterType = Enum.RaycastFilterType.Blacklist

        local rayResult = workspace:Raycast(SheriffPosition, (MurderPosition - SheriffPosition).Unit * 500, RayParams)

        -- If ray hits the murderer or doesn't hit anything, shoot
        if not rayResult or (rayResult.Instance:IsDescendantOf(Murder.Character)) then
            -- Change position to the part that reaveld
            -- and Shoot the Murderer
            MurderPosition = rayResult.Instance.Position or rayResult.Instance.CFrame.Position
            local args = {
                [1] = 1,
                [2] = MurderPosition,
                [3] = "AH2"
            }
            
            Remote:InvokeServer(unpack(args))
        end
    end
end



Funcs.GrabGun = function()
  local gun
  for _,instance in pairs(workspace:GetDescendants()) do
        if instance.Name == "GunDrop" then
            gun = instance
            break
        end
  end
  if not gun then return end
  local name,version = getexecutorname()
  local s = true
  if s then
  	firetouchinterest(hrp, gun,0)
  	wait()
  	firetouchinterest(hrp, gun,1)
	return
  end
  
  local orgPos = hrp.Position
  local GoTween = Funcs.Tween(plr,gun.Position,100)
  local ReturnTween = Funcs.Tween(plr,orgPos,100)
  GoTween:Play()
  GoTween.Completed:Wait()
  ReturnTween:Play()
end

Funcs.ToMurder = function()
    local Murder = Funcs.CheckRoles()["Murder"] or nil
    if Murder and isAlive(Murder) then
        local MurderHRP = Murder.Character:FindFirstChild("HumanoidRootPart")
        if MurderHRP then
            local LookVector = MurderHRP.CFrame.LookVector
            hrp.CFrame = MurderHRP.CFrame - (LookVector * 10) -- 10 studs behind
        end
    end
end

-- Main
local Main = Window:NewTab({
    Name = "Main"
})

local discord = Main:NewSection({
    Name = "Join my Discord!"
},14)
local CopyDiscordLink = Main:NewButton({
  Name = "Copy Discord link <3",
  Callback = function()
    setclipboard("https://discord.gg/9w6BqKz9")
  end,
})

local AutoFarmSection = Main:NewSection({
  Name = "AutoFarm"
})

local AutoFarmToggle = Main:NewToggle({
  Name = "Start AutoFarm",
  Callback = Funcs.AutoFarm,
  Value = AutoFarmValue
})

local DealaySlider = Main:NewSlider({
  Name = "Auto Farm Dealay",
  Start = 1,
  Max = 2.5,
  Callback = function(value)
    Dealay = value
  end
})

local AutoFarmSpeed = Main:NewSlider({
  Name = "Auto Farm Speed ",
  Start = 25,
  Max = 100,
  Callback = function(value)
    Dealay = value
  end
})


local LocalPlayerSection = Main:NewSection({
  Name = "Local Player"
})

local NoClip = Main:NewButton({
  Name = "No Clip",
  Callback = Funcs.NoClip
})


local SpeedSlider = Main:NewSlider({
  Name = "Speed",
  Start = 16,
  Max = 20,
  Callback = function(value)
    hum.WalkSpeed = value
  end
})

local JumpSlider = Main:NewSlider({
  Name = "Jump",
  Start = hum.JumpPower,
  Max = 1000,
  Callback = function(value)
    hum.JumpPower = value
  end
})



-- murder
local Murder = Window:NewTab({Name="Murder"})

local KillAll = Murder:NewToggle({
  Name = "Auto Win",
  Callback = Funcs.KillAll,
  Value = KillAllValue
})

local TeleportToSheriff = Murder:NewButton({
  Name = "Teleport To Sheriff",
  Callback = Funcs.ToSheriff
})

-- Sheriff
local Sheriff = Window:NewTab({
    Name = "Sheriff"
})

local AutoShoot = Sheriff:NewToggle({
    Name = "Auto Shoot",
    Value = AutoShoot,
    Callback = Funcs.AutoShoot
})

local GrabGun = Sheriff:NewButton({
  Name = "Grab Gun",
  Callback = Funcs.GrabGun
})

local TeleportToMurder = Sheriff:NewButton({
  Name = "Teleport To Murder",
  Callback = Funcs.ToMurder
})

-- Visual
local Visual = Window:NewTab({
    Name = "Visual"
})

local playersESP = Visual:NewToggle({
    Name = "ESP",
    Value = esp,
    Callback = Funcs.ESP
})

local gunESP = Visual:NewButton({
  Name = "ESP Gun",
  Callback = Funcs.ESPGun
})
-- misc
local misc = Window:NewTab({Name="Misc"})

local JumpButtonPos = misc:NewButton({
  Name = "Change Jump button position(for mobile only)",
  Callback = function()
    env.JumpPosition = not env.JumpPosition
      if env.JumpPosition then 
          game:GetService("Players").LocalPlayer.PlayerGui.TouchGui.TouchControlFrame.JumpButton.Position = UDim2.new(1, -95, 0.400000006, -95)
      else 
          game:GetService("Players").LocalPlayer.PlayerGui.TouchGui.TouchControlFrame.JumpButton.Position = oldPos
      end
  end
})
local R6 = misc:NewButton({
  Name = "R6",
  Callback = function() loadstring(game:HttpGet(('https://raw.githubusercontent.com/Imagnir/r6_anims_for_r15/main/r6_anims.lua'),true))() end
})

local AntiAfk = misc:NewButton({
	Name = "Anti-Afk",
	Callback = function()
		env.AntiAfk = not env.AntiAfk
		local stat = env.AntiAfk == true and "On" or "Off"
		local color = env.AntiAfk == true and Color3.fromRGB(0,255,0) or Color3.fromRGB(255,0,0)
		Window:Notify({
			Title = "Changed Anti-Afk status!",
			Info = "Anti-Afk: " .. stat ,
			ColorText = {
	    		Text = nil,
	    		TitleColor = nil,
	    		Text2 = stat,
	    		InfoColor = color,
    		},
    		Duration = 3
		})
	end
})


--[[
local function ChangeAnimation(character)
    -- Get humanoid and animator
    local humanoid = character:WaitForChild("Humanoid")
    local animator = humanoid:WaitForChild("Animator")

    -- Stop all playing animations
    for _, playingTrack in animator:GetPlayingAnimationTracks() do
        playingTrack:Stop(0)
    end

    -- Wait for the Animate script
    local animateScript = character:WaitForChild("Animate")
    
    -- Set custom animation IDs for each action
    animateScript.run.RunAnim.AnimationId = "rbxassetid://742638842"
    animateScript.walk.WalkAnim.AnimationId = "rbxassetid://742640026"  
    animateScript.jump.JumpAnim.AnimationId = "rbxassetid://742637942"
    animateScript.idle.Animation1.AnimationId = "rbxassetid://742637544"
    animateScript.idle.Animation2.AnimationId = "rbxassetid://742638445"
    animateScript.fall.FallAnim.AnimationId = "rbxassetid://885477856"
    animateScript.swim.Swim.AnimationId = "rbxassetid://742639220"
    animateScript.swimidle.SwimIdle.AnimationId = "rbxassetid://742639812"  
    animateScript.climb.ClimbAnim.AnimationId = "rbxassetid://742636889"
end


--]]

task.spawn(function()
	local VirtualUser = game:GetService("VirtualUser")
	while task.wait(20) do
		if getgenv().AntiAfk then
			VirtualUser:Button1Down(Vector2.new(0, 0))
        	VirtualUser:Button1Up(Vector2.new(0, 0))
		end
	end
end)