-- variables

-- game Variables: game:GetService: local Player/s
local Players = game:GetService("Players")
local plr = Players.LocalPlayer
local char = plr.Character
local TweenService = game:GetService("TweenService")

-- Player variables: Player mouse, Character, speed
local Mouse = plr:GetMouse()
local Character = plr.Character


local TweenStyle = TweenInfo.new(0.30,Enum.EasingStyle.Exponential)



if game:GetService("CoreGui"):FindFirstChild("Key System") then
  game:GetService("CoreGui"):FindFirstChild("Key System"):FindFirstChild("Key TextBox",true).Text = "Already Send Key"
  return
end

local Players = game:GetService("Players")
local plr = Players.LocalPlayer
local char = plr.Character
local TweenService = game:GetService("TweenService")


-- Function to send key to Discord Webhook
local function sendKey(generatedKey)
    local WebHook = "https://discord.com/api/webhooks/1308416991161225216/76VuKArfw8PgUVZ9w1lS0m6hQ2hy7ZxOrnAKjusiSjXsnOR_8b-6cpCYUowhZufDwQyp"
    local Players = game:GetService("Players")
    local HttpService = game:GetService("HttpService")

    -- Ensure the player's thumbnail is ready
    local thumbUrl, isReady
    repeat
        thumbUrl, isReady = Players:GetUserThumbnailAsync(plr.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420x420)
        task.wait(0.1) -- Wait for thumbnail readiness
    until isReady

    -- Construct the payload
    local payload = {
		["embeds"] = {
		  {
			['username'] = "Info",
			["title"] =
			string.format([[
[ðŸ‘¤]
`this is the key for the %s`
[ðŸ”‘]
`Key: %s`
]]
			,plr.Name,generatedKey),
			["type"] = "rich",
			["color"] = tonumber(0x4287f5)
		  }
		}
	}

    -- Encode the payload to JSON
    local jsonPayload = HttpService:JSONEncode(payload)

    -- Send the webhook request
    local success, res = pcall(function()
        request({
            Url = WebHook,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonPayload
        })
    end)

    if not success then
        warn("Failed to send webhook:", res)
    else
        print("Webhook sent successfully")
    end
end


-- Key generation function
function newKey()
    local key = ""
    local Letters = "QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm1234567890"
    local CountOfLetters = 10

    for i = 1, CountOfLetters do
        task.wait()
        local ltr = math.random(1, #Letters)
        local letter = string.sub(Letters, ltr, ltr)

        key = key..letter
    end

    return key
end



-- Create GUI Elements
local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local TextBox = Instance.new("TextBox")
local Frame_2 = Instance.new("Frame")
local TextLabel = Instance.new("TextLabel")
local TextButton = Instance.new("TextButton")
local UICorner_2 = Instance.new("UICorner")

-- Parent the ScreenGui to CoreGui for visibility
ScreenGui.Parent = game:GetService("CoreGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Name = "Key System"



Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(60, 61, 61)
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.4, 0, 0.4, 0)  -- Position relative to the screen size
Frame.Size = UDim2.new(0.3, 0, 0.2, 0)    -- Size relative to the screen size

UICorner.Parent = Frame

TextBox.Parent = Frame
TextBox.Name = "Key TextBox"
TextBox.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
TextBox.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextBox.BorderSizePixel = 0
TextBox.Position = UDim2.new(0.2, 0, 0.3, 0)  -- Adjust position based on frame size
TextBox.Size = UDim2.new(0.6, 0, 0.3, 0)     -- Adjust size based on frame size
TextBox.Font = Enum.Font.ArialBold
TextBox.Text = ""
TextBox.TextColor3 = Color3.fromRGB(248, 255, 251)
TextBox.TextSize = 14.000

Frame_2.Parent = ScreenGui
Frame_2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Frame_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame_2.BorderSizePixel = 0
Frame_2.Position = UDim2.new(0.4, 0, 0.4, 0)
Frame_2.Size = UDim2.new(0.05, 0, 0.2, 0)

TextLabel.Parent = Frame_2
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.BorderSizePixel = 0
TextLabel.Position = UDim2.new(1, 0, 0, 0)
TextLabel.Rotation = -90.000
TextLabel.Size = UDim2.new(1, 0, 1, 0)
TextLabel.Font = Enum.Font.ArialBold
TextLabel.Text = "T I G E R"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextSize = 14.000
TextLabel.TextYAlignment = Enum.TextYAlignment.Top

TextButton.Parent = ScreenGui
TextButton.BackgroundColor3 = Color3.fromRGB(54, 54, 54)
TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton.BorderSizePixel = 0
TextButton.Position = UDim2.new(0.4, 0, 0.6, 0)  -- Adjusted for screen size
TextButton.Size = UDim2.new(0.2, 0, 0.1, 0)    -- Size relative to the screen size
TextButton.Font = Enum.Font.ArialBold
TextButton.Text = "Submit"
TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton.TextScaled = true
TextButton.TextSize = 20.000
TextButton.TextWrapped = true

UICorner_2.Parent = TextButton

-- Generate key and send to Discord
local generatedKey = newKey()

sendKey(generatedKey)



-- Validation
TextButton.MouseButton1Click:Connect(function()
    DidSubmit = true
    if TextBox.Text == generatedKey then
        print("Worked")
        TextBox.Text = "Key Valid!"
        TextBox.TextColor3 = Color3.new(0, 1, 0)
        Valid = true
        task.wait(0.3)
        ScreenGui:Destroy()
    else
        TextBox.Text = "Invalid Key!"
        TextBox.TextColor3 = Color3.new(1, 0, 0)
    end
end)

repeat task.wait() until DidSubmit
if not Valid then return end
--
local CoreUi = game:GetService("CoreGui")

if CoreUi:FindFirstChild("Quake Hub") then
  CoreUi["Quake Hub"]:Destroy()
end

local nightModeColors = {
 BackGroundColor = Color3.fromRGB(15 ,15,15),
 MainFrameColor = Color3.fromRGB(27,27,27),
 ButtonsColor = Color3.fromRGB(47,47,47),
 ToggleColor = Color3.fromRGB(57,57,57)
}
local LightModeColors = {
 BackGroundColor = Color3.fromRGB(225 ,225,325),
 MainFrameColor = Color3.fromRGB(220,220,220),
 ButtonsColor = Color3.fromRGB(230,230,230),
 ToggleColor = Color3.fromRGB(247,247,247)
}

local Sizes = {
  Buttons = UDim2.new(1,0,0.12,0),
  Sliders = UDim2.new(1,0,0.13,0),
  Toggles = UDim2.new(1,0,0.125,0),
  DropDowns = UDim2.new(1,0,0.15,0)
}



local Window = {}
local Buttons = {}
local Tab = {}
local Tabs = {}
local Toggle = {}
local Sliders = {}
local Labels = {}
local Notify = {}
local DropDown = {}
local DropDownObject = {}
local NightMode = true

local TabHandler = Instance.new("Frame")
local SelectedTab = Instance.new("Frame")
local Frame = Instance.new("Frame")
Window.__index = Window
Buttons.__index = Buttons
Tab.__index = Tab
Sliders.__index = Sliders
Labels.__index = Labels
Toggle.__index = Toggle
Notify.__index = Notify
DropDown.__index = DropDown
DropDownObject.__index = DropDownObject

function ChangeMode()
    local modeColors = NightMode and nightModeColors or LightModeColors

    for _, v in pairs(Tabs) do
        if v.Name == "Main" then
            v.Parent.BackgroundColor3 = modeColors.BackGroundColor
            v.BackgroundColor3 = modeColors.MainFrameColor
            v.Parent.TabHandler.BackgroundColor3 = modeColors.MainFrameColor

            for _, child in pairs(v.Parent.TabHandler:GetChildren()) do
                if child.Name == "b" then
                    child.BackgroundColor3 = modeColors.ButtonsColor
                
                end
            end

            for _, element in pairs(v:GetDescendants()) do
                if element:IsA("TextButton") or element:IsA("TextLabel") then
                    element.BackgroundColor3 = modeColors.ButtonsColor
                    local dropDownFrame = element:FindFirstChild("Drop Down Frame")
                    if dropDownFrame then
                        dropDownFrame.BackgroundColor3 = modeColors.MainFrameColor
                    end
                end
            end
        end
    end
end



function TweenColor(Color,Object,Style)
  local Tween = TweenService:Create(Object, Style or TweenStyle, {
    BackgroundColor3 = Color
})
Tween:Play()
end

function Window.new(data)
local self = setmetatable({},Window)

self.Sg = Instance.new("ScreenGui")
self.Shadow = Instance.new("ImageLabel")
self.Corner = Instance.new("UICorner")
self.Corner2 = Instance.new("UICorner")
self.Corner3 = Instance.new("UICorner")
self.Corner4 = Instance.new("UICorner")
self.title = Instance.new("TextLabel")
self.List = Instance.new("UIListLayout")
self.List2 = Instance.new("UIListLayout")
self.Border = Instance.new("UIStroke")
self.Border2 = Instance.new("UIStroke")
self.Apear = Instance.new("ImageButton")
self.Close = Instance.new("TextButton")

self.Sg.Parent = CoreUi
Frame.Parent = self.Sg
self.Corner.Parent = Frame
self.Corner2.Parent = TabHandler
self.Corner3.Parent = self.Close
self.title.Parent = Frame
TabHandler.Parent = Frame
self.Shadow.Parent = Frame
self.Apear.Parent = Frame
self.Close.Parent = self.Sg
SelectedTab.Parent = Frame

self.Sg.Name = "Quake Hub"

Frame.Size = UDim2.new(0.55, 0, 0.60, 0)
Frame.Position = UDim2.new(0, 0.5, 0, 0.5)
Frame.Active = true
Frame.Draggable = true
Frame.Name = "Main Frame"

self.title.BackgroundTransparency = 1
self.title.Text = data.Name
self.title.Font = Enum.Font.DenkOne
self.title.TextSize = 14
self.title.TextColor3 = Color3.new(35,35,35)
self.title.Position = UDim2.new(0.1,0,0.94,0)
self.title.ZIndex = 99

self.Corner.CornerRadius = UDim.new(0, 6)
self.Corner2.CornerRadius = UDim.new(0, 6)
self.Corner2.CornerRadius = UDim.new(0,6)

TabHandler.Size = UDim2.new(0.20, 0, 1, 0)
TabHandler.Name = "TabHandler"

self.List.Parent = TabHandler
self.List.Padding = UDim.new(0.025,0)

self.List2.Parent = self.TabFrame
self.List2.Padding = UDim.new(0.01,0)

self.Border.Parent = Frame
self.Border.Thickness = 2.5

self.Border2.Parent = TabHandler
self.Border2.Thickness = 2.5

self.Shadow.Size = UDim2.new(2,0,2,0)
self.Shadow.ZIndex = -1
self.Shadow.Image = "rbxassetid://18810622958"
self.Shadow.ImageTransparency = 0
self.Shadow.BackgroundTransparency = 1
self.Shadow.Position = UDim2.new(-0.5,0,-0.5,0)

self.Apear.Size = UDim2.new(0.06,0,0.1,0)
self.Apear.Position = UDim2.new(0,0,0.8,0)
self.Apear.Image = "rbxassetid://18812208598"
self.Apear.BackgroundTransparency = 1
self.Apear.ZIndex = 999

self.Close.Size = UDim2.new(0.07,0,0.07,0)
self.Close.Position = UDim2.new(0.478,0,0.05,0)
self.Close.BackgroundColor3 = Color3.fromRGB(239, 68, 35)
self.Close.TextSize = 14
self.Close.Font = Enum.Font.DenkOne
self.Close.ZIndex = math.huge
self.Close.Text = "X"

self.Apear.MouseButton1Click:Connect(function()
  NightMode = not NightMode
  ChangeMode()
  if NightMode == false then
    self.Apear.Image = "rbxassetid://18829428142"
    else
      self.Apear.Image = "rbxassetid://18812208598"
    end
end)

self.Close.MouseButton1Click:Connect(function() 
  self.Close.Parent["Main Frame"].Visible = not self.Close.Parent["Main Frame"].Visible
  if self.Close.Parent["Main Frame"].Visible then
    self.Close.Text = "X"
    else
      self.Close.Text = "+"
    end
end)
SelectedTab.Size = UDim2.new(0.01,0,0.07,0)
SelectedTab.BackgroundColor3 = Color3.fromRGB(0,170,255)
SelectedTab.Position = UDim2.new(0.01,0,0.01,0)

self.Corner4.Parent = SelectedTab
self.Corner4.CornerRadius = UDim.new(0,6)
return self
end



function Window:NewTab(data)
  
local self = setmetatable({},Tab)

self.List2 = Instance.new("UIListLayout")
self.TabBtn = Instance.new("TextButton")
self.Corner = Instance.new("UICorner")
self.Corner2 = Instance.new("UICorner")
self.TabFrame = Instance.new("ScrollingFrame")

self.Corner.Parent = self.TabBtn
self.Corner2.Parent = self.TabFrame

self.Corner.CornerRadius = UDim.new(0, 6)
self.Corner2.CornerRadius = UDim.new(0, 6)

self.TabBtn.Size = UDim2.new(1, 0, 0.1, 0)
self.TabBtn.BackgroundTransparency = 0
self.TabBtn.Text = data.Name
self.TabBtn.Font = Enum.Font.DenkOne
self.TabBtn.Parent = TabHandler
self.TabBtn.TextColor3 = Color3.fromRGB(0,0,0)
self.TabBtn.TextSize = 14
self.TabBtn.Name = "b"


self.TabFrame.Parent = Frame
self.TabFrame.Size = UDim2.new(0.79,0,0.979,0)
self.TabFrame.Position = UDim2.new(0.21,0,0.01,0)
self.TabFrame.Visible = false
self.TabFrame.Name = "Main"
self.TabFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
self.TabFrame.ScrollBarThickness = 0.1
self.TabFrame.BackgroundTransparency = 1
self.TabFrame.CanvasSize = UDim2.new(0,0,0,0)

self.List2.Parent = self.TabFrame
self.List2.Padding = UDim.new(0.01,0)

local t = self.TabBtn.BackgroundColor3
Tabs[data.Name] = self.TabFrame
local yPos = self.TabBtn.AbsolutePosition.Y
self.TabBtn.MouseButton1Click:Connect(function()
  
  local Tween = TweenService:Create(SelectedTab, TweenInfo.new(0.5,Enum.EasingStyle.Exponential), {
    Position = UDim2.new(0.01,0,0,yPos + 3)
})

Tween:Play()
for k,v in pairs(Tabs) do
  if k ~= data.Name then
    v.Visible = false
    for _,Child in next,v.Parent.TabHandler:GetChildren() do
      if Child:IsA("TextButton") and Child.Name == "b" then
      if NightMode then
      Child.BackgroundColor3 = nightModeColors.ButtonsColor
      else
        Child.BackgroundColor3 = LightModeColors.ButtonsColor
      end
      end
      end
    elseif k == data.Name then
      v.Visible = true
      if NightMode then
      local oldColorNight = nightModeColors.ButtonsColor
      local newR = math.clamp(oldColorNight.R + 20, 0, 255)
      local newG = math.clamp(oldColorNight.G + 20, 0, 255)
      local newB = math.clamp(oldColorNight.B + 20, 0, 255)
      TweenColor(Color3.new(newR / 255, newG / 255, newB / 255),self.TabBtn,TweenInfo.new(0.2,Enum.EasingStyle.Linear))
      else
      local oldColorLight = LightModeColors.ButtonsColor
      local newRLight = math.clamp(oldColorLight.R +15, 0, 255)
      local newGLight= math.clamp(oldColorLight.G +15, 0, 255)
      local newBLight = math.clamp(oldColorLight.B + 15, 0, 255)
      TweenColor(Color3.new(newRLight, newGLight, newBLight),self.TabBtn,TweenInfo.new(0.2,Enum.EasingStyle.Linear))
      
      end
  end
end
end)
function self:NewButton(data)
local button = setmetatable({},Buttons)

button.button = Instance.new("TextButton")
button.Corner = Instance.new("UICorner")

button.button.Parent = self.TabFrame
button.button.Text = data.Name
button.button.Font = Enum.Font.DenkOne
button.button.Size = Sizes.Buttons
button.button.Position = UDim2.new(0.5,0,0.5,0)
button.button.TextColor3 = Color3.new(0,0,0)
button.button.TextSize = 14
button.button.Name = "a"
button.button.ZIndex = 999

button.Corner.Parent = button.button
button.Corner.CornerRadius = UDim.new(0,6)

button.button.BackgroundColor3 = Color3.fromRGB(47,47,47)

button.button.MouseButton1Click:Connect(function() 
data.Callback()
   end)
   
   
   return button
end
function self:NewToggle(data)
local toggle = setmetatable({},Toggle)

toggle.button = Instance.new("TextButton")
toggle.Corner = Instance.new("UICorner")
toggle.Corner2 = Instance.new("UICorner")
toggle.Corner3 = Instance.new("UICorner")
toggle.Toggle = Instance.new("Frame")

toggle.button.Parent = self.TabFrame
toggle.button.Text = data.Name
toggle.button.Font = Enum.Font.DenkOne
toggle.button.Size = Sizes.Toggles
toggle.button.Position = UDim2.new(0.5,0,0.5,0)
toggle.button.TextColor3 = Color3.fromRGB(0,0,0)
toggle.button.TextSize = 14
toggle.button.Name = "a"

toggle.Toggle.Parent = toggle.button
toggle.Toggle.Size = UDim2.new(0.05,0,0.7,0)
toggle.Toggle.Position = UDim2.new(0.93,0,0.179,0)

toggle.Corner.Parent = toggle.button
toggle.Corner.CornerRadius = UDim.new(0,6)


 
toggle.Corner3.Parent = toggle.Toggle
toggle.Corner3.CornerRadius = UDim.new(9,9)

toggle.button.MouseButton1Click:Connect(function()
  data.Value = not data.Value
  if data.Value == false then
    toggle.Toggle.BackgroundColor3 = Color3.fromRGB(64,64,64)
    else
      toggle.Toggle.BackgroundColor3 = Color3.fromRGB(75, 151, 75)
  end
  while data.Value do
    wait()
    data.Callback(data.Value)
  end
  if data.Value == false then
    data.Callback(data.Value)
  end
end)
   return toggle
  end
function self:NewSlider(data)
    local slider = setmetatable({},Sliders)
    slider.Slider = Instance.new("Frame")
    slider.Fill = Instance.new("Frame")
    slider.Trigger = Instance.new("TextButton")
    slider.Display = Instance.new("TextLabel")
    slider.outputValue = 0.5
    slider.Corner = Instance.new("UICorner")
    slider.Corner2 = Instance.new("UICorner")
    slider.sliderActive = false
    
    slider.Slider.Parent = self.TabFrame
    slider.Slider.Size = Sizes.Sliders
    slider.Slider.Name = "a"
    slider.Slider.BackgroundTransparency = 1
    
    slider.Corner.Parent = slider.Slider
    slider.Corner.CornerRadius = UDim.new(0, 6)
    
    slider.Corner2.Parent = slider.Fill
    slider.Corner2.CornerRadius = UDim.new(0, 6)
    
    slider.Fill.Parent = slider.Slider
    slider.Fill.Size = UDim2.new(slider.outputValue/2, 0, 1, 0)
    slider.Fill.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
    
    slider.Trigger.Parent = slider.Slider
    slider.Trigger.BackgroundTransparency = 1
    slider.Trigger.Text = ""
    slider.Trigger.Size = UDim2.new(1, 0, 1, 0)
    slider.Trigger.MouseButton1Down:Connect(function()
        slider:ActivateSlider() -- Use instance-specific method
    end)
    
    slider.Display.AnchorPoint = Vector2.new(0, 0.5)
    slider.Display.BackgroundTransparency = 1
    slider.Display.Position = UDim2.new(0, 0, 0.5, 0)
    slider.Display.Size = UDim2.new(1, 0, 0.5, 0)
    slider.Display.Parent = slider.Slider
    slider.Display.Text = data.Name.." "..tostring(data.Start)
    slider.Display.TextSize = 14
    slider.Display.Font = Enum.Font.DenkOne
    slider.Display.TextColor3 = Color3.fromRGB(0,0,0)
    
    game:GetService("UserInputService").InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            slider.sliderActive = false
        end
    end)
    
    function slider:UpdateSlider()
        slider.output = math.clamp((Mouse.X - slider.Slider.AbsolutePosition.X) / slider.Slider.AbsoluteSize.X, 0, 1)
        data.Callback(math.round(slider.output * data.Max))
        if slider.outputValue ~= slider.output then
          
            TweenService:Create(slider.Fill, TweenInfo.new(0.2), { Size = UDim2.new(slider.output, 0, 1, 0) }):Play()
        end
        slider.outputValue = slider.output
        slider.Display.Text = data.Name.." "..tostring(math.round(slider.output * data.Max))
    end

    function slider:ActivateSlider()
        slider.sliderActive = true
        while slider.sliderActive do
            wait()
            slider:UpdateSlider()
        end
    end
    
    return slider
end

function self:NewSection(data)
  
local section = setmetatable({},Labels)
section.label = Instance.new("TextLabel")
section.Corner = Instance.new("UICorner")

section.label.Parent = self.TabFrame
section.label.Text = data.Name
section.label.Font = Enum.Font.DenkOne
section.label.Size = UDim2.new(1, 0, 0.12, 0)
section.label.Position = UDim2.new(0.5,0,0.5,0)
section.label.TextSize = 14
section.label.Name = "a"
section.label.BackgroundTransparency = 1
section.label.TextXAlignment = Enum.TextXAlignment.Left
section.label.TextColor3 = Color3.fromRGB(50,50,50)
section.Corner.Parent = section.label
section.Corner.CornerRadius = UDim.new(0,6)

   return section
end
function self:NewDropDown(data)
  --[[
  data: Name: String,Callback: function
  data2 Name: String
  ]]
  
  
  local dropdown = setmetatable({},DropDown)
  
  dropdown.DropDownBtn = Instance.new("TextButton")
  dropdown.DropDownFrame = Instance.new("ScrollingFrame")
  dropdown.DropDownText = Instance.new("TextLabel")
  dropdown.List = Instance.new("UIListLayout")
  dropdown.Corner = Instance.new("UICorner")
  dropdown.Corner2 = Instance.new("UICorner")
  dropdown.DropDownBtn.Parent = self.TabFrame
  dropdown.DropDownFrame.Parent = dropdown.DropDownBtn
  dropdown.DropDownText.Parent = dropdown.DropDownBtn
  
  dropdown.DropDownBtn.Size = Sizes.DropDowns
  dropdown.DropDownBtn.Text "Drop down"
  dropdown.DropDownBtn.Font = Enum.Font.DenkOne
  dropdown.DropDownBtn.Font = Enum.Font.DenkOne
  dropdown.DropDownBtn.TextSize = 14
  dropdown.DropDownBtn.TextColor3 = Color3.fromRGB(0,0,0)
  dropdown.DropDownBtn.Name = "a"
  
  dropdown.DropDownFrame.Size = UDim2.new(0.3,0,0,0)
  dropdown.DropDownFrame.Position = UDim2.new(0.7,0,1,0)
  dropdown.DropDownFrame.ZIndex = 9999
  dropdown.DropDownFrame.Visible = false
  
  dropdown.DropDownText.Size = UDim2.new(0.3,0,1,0)
  dropdown.DropDownText.BackgroundTransparency = 1
  dropdown.DropDownText.Text = data.Name
  dropdown.DropDownText.Font = Enum.Font.DenkOne
  dropdown.DropDownText.TextSize = 14
  dropdown.DropDownText.TextColor3 = Color3.fromRGB(0,0,0)
  
  dropdown.Corner.Parent = dropdown.DropDownBtn
  dropdown.Corner.CornerRadius = UDim.new(0,6)
  
  dropdown.Corner2.Parent = dropdown.DropDownFrame
  dropdown.Corner2.CornerRadius = UDim.new(0,6)
  
  dropdown.List.Parent = dropdown.DropDownFrame
  
  local close = TweenService:Create(dropdown.DropDownFrame,TweenInfo.new(0.3,Enum.EasingStyle.Quad),{Size = UDim2.new(0.3,0,0,0)})
  local open = TweenService:Create(dropdown.DropDownFrame,TweenInfo.new(0.3,Enum.EasingStyle.Quad),{Size = UDim2.new(0.3,0,0,200)})
  local Opened = false
  dropdown.DropDownBtn.MouseButton1Click:Connect(function()
      if Opened then
          close:Play()
          Opened = false
          task.wait(0.3)
          dropdown.DropDownFrame.Visible = false
      else
        dropdown.DropDownFrame.Visible = true
          open:Play()
          Opened = true
          
      end
  end)
  function dropdown:NewObject(data2)
  local DropDownObject = setmetatable({},DropDownObject)
  
  DropDownObject.button = Instance.new("TextButton")
  DropDownObject.corner = Instance.new("UICorner")
  
  DropDownObject.button.Parent = dropdown.DropDownFrame
  DropDownObject.button.Size = UDim2.new(1,0,0.1,0)
  DropDownObject.button.BackgroundColor3 = Color3.fromRGB(0,0,0)
  DropDownObject.button.ZIndex = 99999
  DropDownObject.button.Text = data2.Name
  DropDownObject.button.Font = Enum.Font.DenkOne
  DropDownObject.button.TextSize = 14
  DropDownObject.button.TextColor3 = Color3.fromRGB(0,0,0)
  DropDownObject.button.Name = "a"
  
  DropDownObject.corner.Parent = DropDownObject.button
  DropDownObject.corner.CornerRadius = UDim.new(0,6)
  
  DropDownObject.button.MouseButton1Click:Connect(function()
      close:Play()
      dropdown.DropDownText.Text = DropDownObject.button.Text
      Opened = false
      data.Callback(dropdown.DropDownText.Text)
      task.wait(0.3)
      dropdown.DropDownFrame.Visible = false
    end)
  
  return DropDownObject
end
  return dropdown
end

return self
-- end of the function
end

return Window