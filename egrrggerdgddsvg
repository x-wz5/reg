local cFlow = {}

local ReadScript = game:HttpGet("https://raw.githubusercontent.com/x-wz5/reg/refs/heads/main/wefwwffwef.lua")

local Read = loadstring(ReadScript)()

local opc = {
    [26] = "JMP",          -- Unconditional jump
    [27] = "JMPIF",        -- Jump if condition is true (e.g., for `if` or `while`)
    [28] = "JMPNOT",       -- Jump if condition is false (inverse of JMPIF)
    [29] = "TEST",         -- Test a condition (e.g., comparison result)
    [30] = "TESTSET",      -- Conditional set based on test
    [31] = "EQ",           -- Equality check
    [32] = "LT",           -- Less-than check
    [33] = "LE",           -- Less-than-or-equal check
    [34] = "CALL",         -- Function call (could involve control flow)
    [35] = "RETURN",       -- Return from function (used in control flow)
    [36] = "FORPREP",      -- Prepare for loop (for loop start)
    [37] = "FORLOOP",      -- Loop (for loop increment)
    [38] = "TFORLOOP",     -- Generic for loop (with iterator)
}

function cFlow.new(bytecode)
  local Reader = Read.new(bytecode)
  local self = {}
  
  function self:getAlIf()
    local result = ""
    while Reader.cursor < Reader:len() do
      local cursor = Reader.cursor
      local byte = Reader:nextByte()
      
        if byte == 26 then
        result = result..opc[26].."\n"
        end
        if byte == 27 then
          result = result..opc[27].."\n"
        end
        if byte == 28 then 
          result = result..opc[28].."\n"
        end
      cursor = cursor + 1
    end
    return result
  end
  
end